<?php
 class umiTemplaterXSLTParsePageTest extends umiTestCase {protected static $templater;protected static $page;protected static $globalVars = array();protected static $actualResult;protected static $xPath;public static function setUpBeforeClass() {self::$page = self::createPageFixture(__CLASS__, 'content', '');self::$page->content = 'Content';self::$page->title = 'Title';self::$page->meta_keywords = 'Keywords';self::$page->meta_descriptions = 'Description';self::$page->h1 = 'Header';self::$page->commit();$_REQUEST['path'] = '/' . self::$page->getAltName() . "/";self::controller()->analyzePath(true);$_REQUEST['test_request_param'] = 'testRequestParamValue';$_SERVER['test_server_param'] = 'testServerParamValue';self::$templater = umiTemplater::create('XSLT', dirname(__FILE__) . "/data/umiTemplaterXSLTParsePageTest.xsl");self::$templater->setScope(self::$page->getId());self::$globalVars = self::controller()->getGlobalVariables();$v136a063334d3fa03b2febfbb4855cbc3 = self::$templater->parse(self::$globalVars);self::$actualResult = new DOMDocument('1.0', 'utf-8');self::$actualResult->loadXML($v136a063334d3fa03b2febfbb4855cbc3);self::$xPath = new DOMXPath(self::$actualResult);}public static function tearDownAfterClass() {parent::tearDownAfterClass();unset($_REQUEST['path']);unset($_REQUEST['test_request_param']);unset($_SERVER['test_server_param']);}public function testRequestParam() {$v1a13105b7e4eb5fb2e7c9515ac06aa48 = self::$xPath->evaluate("//test[@name = 'testRequestParam']");$this->assertEquals('testRequestParamValue', $v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0)->nodeValue, 'Не передаются $_REQUEST-параметры в шаблон.');}public function testServerParam() {$v1a13105b7e4eb5fb2e7c9515ac06aa48 = self::$xPath->evaluate("//test[@name = 'testServerParam']");$this->assertEquals('testServerParamValue', $v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0)->nodeValue, 'Не передаются $_SERVER-параметры в шаблон.');}public function testRepeatParse() {$v6052c20bf53f16f57139c21feff8ff8f = self::$actualResult;$v301ee7860666c81ec19ababbba418f26 = self::$templater->parse(self::$globalVars);$v1d137762d9282b91ae92344127e9cc59 = new DOMDocument('1.0', 'utf-8');$v1d137762d9282b91ae92344127e9cc59->loadXML($v301ee7860666c81ec19ababbba418f26);$this->assertEquals($v1d137762d9282b91ae92344127e9cc59->saveXML(), $v6052c20bf53f16f57139c21feff8ff8f->saveXML());}public function testParseSimpleProperties() {$v1a13105b7e4eb5fb2e7c9515ac06aa48 = self::$xPath->evaluate("//test[@name = 'testParseProperies']/prop[@name = 'title']");$this->assertNotEmpty($v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0));$this->assertEquals(self::$page->title, $v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0)->nodeValue);$v1a13105b7e4eb5fb2e7c9515ac06aa48 = self::$xPath->evaluate("//test[@name = 'testParseProperies']/prop[@name = 'meta_keywords']");$this->assertNotEmpty($v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0));$this->assertEquals(self::$page->meta_keywords, $v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0)->nodeValue);$v1a13105b7e4eb5fb2e7c9515ac06aa48 = self::$xPath->evaluate("//test[@name = 'testParseProperies']/prop[@name = 'meta_descriptions']");$this->assertNotEmpty($v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0));$this->assertEquals(self::$page->meta_descriptions, $v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0)->nodeValue);$this->assertNotEmpty($v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0));$v1a13105b7e4eb5fb2e7c9515ac06aa48 = self::$xPath->evaluate("//test[@name = 'testParseProperies']/prop[@name = 'h1']");$this->assertEquals(self::$page->h1, $v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0)->nodeValue);}public function testParseTplScopeMacroses() {if (defined('XML_MACROSES_DISABLE') && XML_MACROSES_DISABLE) {throw new Exception("Не могу протестировать обработку TPL-макросов, включена опция XML_MACROSES_DISABLE");}self::$page->content = '%meta_keywords%,%pid%';self::$page->commit();$v136a063334d3fa03b2febfbb4855cbc3 = self::$templater->parse(self::$globalVars);$v4dbdfdb5f7e507c8955733a7117cb0b3 = new DOMDocument('1.0', 'utf-8');$v4dbdfdb5f7e507c8955733a7117cb0b3->loadXML($v136a063334d3fa03b2febfbb4855cbc3);$v5e9f367e6f6a355657c806a522cc5afb = new DOMXPath($v4dbdfdb5f7e507c8955733a7117cb0b3);$v1a13105b7e4eb5fb2e7c9515ac06aa48 = $v5e9f367e6f6a355657c806a522cc5afb->evaluate("//test[@name = 'testParseProperies']/prop[@name = 'content']");$this->assertEquals(self::$page->meta_keywords. "," . self::$page->getId(), $v1a13105b7e4eb5fb2e7c9515ac06aa48->item(0)->nodeValue);}}